name: CI/CD Pipeline

# Add permissions block to all workflows
permissions:
  pull-requests: write
  issues: write
  contents: read

on:
  push:
    branches-ignore:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Allow manual trigger

  # Use this to trigger production deployment when PR is merged to main
  pull_request_target:
    types: [closed]
    branches:
      - main

# Define reusable env variables
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: 22

jobs:
  # Quality checks
  quality-checks:
    name: Quality Checks
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: useblacksmith/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check --if-present

      - name: Run Vitest tests
        run: npm run test -- --coverage

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    needs: quality-checks
    runs-on: blacksmith-4vcpu-ubuntu-2204
    env:
      NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
      CONVEX_DEPLOYMENT: test
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:
        ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      NODE_ENV: test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: useblacksmith/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test

      - name: Upload Playwright report on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Deploy preview for PRs
  deploy-preview:
    name: Deploy Preview
    needs: [quality-checks, e2e-tests]
    if: github.event_name == 'pull_request'
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        run:
          vercel pull --yes --environment=preview --token=${{
          secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy preview to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment_url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployed to: ${deploymentUrl}`
            });

  # Deploy to production when PR is merged to main branch
  deploy-production:
    name: Deploy Production
    needs: [quality-checks, e2e-tests]
    if:
      github.event_name == 'pull_request_target' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main'
    runs-on: blacksmith-4vcpu-ubuntu-2204
    environment: production
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        run:
          vercel pull --yes --environment=production --token=${{
          secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel production
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
